==============================================================
  VALIDACIÓN COMPLETA DEL PROYECTO MLOps
  Raíz del proyecto : C:/dev/mna-mlops-team46
  Módulo Python      : german_credit_ml
  Fecha de ejecución : Thu, Oct 30, 2025  7:35:42 PM
==============================================================

--------------------------------------------------------------
Ejecutando 01_check_structure.py ...
--------------------------------------------------------------

1) Estructuración de Proyectos con Cookiecutter Data Science v2
---------------------------------------------------------------
mna-mlops-team46/
   ├─ README.md                                                       [PRESENTE]
   ├─ LICENSE                           (opcional pero recomendado)   [PRESENTE]
   ├─ .gitignore                                                      [PRESENTE]
   ├─ .env.example                      (variables, sin secretos)     [PRESENTE]
   ├─ pyproject.toml     (o requirements.txt + setup.cfg)             [PRESENTE]
   ├─ Makefile                          (tareas comunes)              [PRESENTE]
   ├─ data/                                                           [PRESENTE]
   │  ├─ raw/                           (solo lectura)                [PRESENTE]
   │  ├─ interim/                       (steps intermedios)           [PRESENTE]
   │  └─ processed/                     (dataset limpio para modeling)[PRESENTE]
   ├─ models/                           (artefactos entrenados)       [PRESENTE]
   ├─ notebooks/                        (numerados: 0x-autor-propósito)[PRESENTE]
   ├─ reports/                          (figuras, tablas)             [PRESENTE]
   ├─ german_credit_ml/                 (paquete Python principal del proyecto)[PRESENTE]
   │  ├─ __init__.py                                                  [PRESENTE]
   │  ├─ data/                          (IO de datos)                 [PRESENTE]
   │  ├─ features/                      (featurización)               [PRESENTE]
   │  ├─ models/ (o modeling/)          (train, predict, evaluate)    [PRESENTE]
   │  └─ utils/                         (helpers/utilidades compartidas)[PRESENTE]
   ├─ tests/                            (pytest)                      [PRESENTE]
   ├─ dvc.yaml                          (si usas DVC)                 [PRESENTE]
   ├─ params.yaml                       (hiperparámetros/config)      [PRESENTE]
   ├─ mlruns/                           (si MLflow local)             [PRESENTE]← puede estar ignorado
   └─ .pre-commit-config.yaml           (formato/linters)             [PRESENTE]

Leyenda de estados:
  [PRESENTE]           Elemento encontrado en el repo
  [FALTA-REQUERIDO]    Elemento requerido ausente (debe corregirse)
  [FALTA-RECOMENDADO]  Elemento recomendado ausente (muy aconsejable)
  [FALTA-OPCIONAL]     Elemento opcional ausente (según necesidades)

--------------------------------------------------------------
Ejecutando 02_check_refactor.py ...
--------------------------------------------------------------

2) Refactorización y modularización del código — Chequeo estático
-----------------------------------------------------------------
german_credit_ml/ (visión lógica de pipeline ML)
├─ preprocess.py                                  [PRESENTE]
├─ train.py (incluye modeling/train.py)           [PRESENTE]
└─ evaluate.py (incluye modeling/evaluate.py)     [PRESENTE]

Funciones por responsabilidad (mínimos por módulo)
--------------------------------------------------
preprocess.py                 [PRESENTE]   german_credit_ml\modeling\preprocess.py -> OK
train.py                      [PRESENTE]   german_credit_ml\modeling\train.py -> OK
evaluate.py                   [PRESENTE]   german_credit_ml\modeling\evaluate.py -> OK

POO sugerida (clases reutilizables)
-----------------------------------
Clases sugeridas              [FALTA-RECOMENDADO]   No se detectaron ['ModelTrainer', 'DataPipeline']

Pruebas unitarias básicas (pytest)
----------------------------------
tests/test_*.py               [PRESENTE]   tests\test_data.py, tests\test_preprocess.py

Buenas prácticas (docstrings, type hints, main guard)
-----------------------------------------------------
Docstrings funciones (>=50%)  [FALTA-RECOMENDADO]   ratio=0.31 (65 funcs)
Type hints funciones (>=30%)  [PRESENTE]   ratio=0.60
__main__ en scripts           [PRESENTE]   OK

Leyenda de estados:
  [PRESENTE]           Regla satisfecha
  [FALTA-REQUERIDO]    Debe corregirse para cumplir la refactorización mínima
  [FALTA-RECOMENDADO]  Muy aconsejable para mantenibilidad/testabilidad
  [FALTA-OPCIONAL]     Depende del contexto del proyecto

Sugerencias:
 - Añade docstrings breves a funciones públicas (qué hace, entradas, salidas).

--------------------------------------------------------------
Ejecutando 03_check_sklearn_pipeline.py ...
--------------------------------------------------------------

3) Aplicación de Mejores Prácticas de Codificación en el Pipeline de Modelado
----------------------------------------------------------------------------
Archivos analizados:
  - C:\dev\mna-mlops-team46\german_credit_ml\modeling\train.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\modeling\evaluate.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\modeling\preprocess.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\modeling\predict.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\clean.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\config.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\dataset.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\eda.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\features.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\plots.py (OK)
  - C:\dev\mna-mlops-team46\german_credit_ml\utils.py (OK)

Pipeline (sklearn.pipeline.Pipeline/make_pipeline)                [PRESENTE]
Preprocesamiento con ColumnTransformer                            [PRESENTE]
Imputación (SimpleImputer)                                        [PRESENTE]
Escalado numérico (StandardScaler)                                [PRESENTE]
Codificación categórica (OneHotEncoder)                           [PRESENTE]
train_test_split con random_state reproducible                    [PRESENTE]
Validación cruzada (cross_val_score)                              [PRESENTE]
Búsqueda de hiperparámetros (GridSearchCV / RandomizedSearchCV)   [FALTA-RECOMENDADO]
Métricas sklearn.metrics registradas                              [PRESENTE]
Persistencia de modelo/artefactos (joblib/pickle/mlflow.sklearn.log_model) [PRESENTE]
Registro en MLflow (parámetros, métricas, artefactos)             [PRESENTE]
Uso de params.yaml / YAML como configuración declarativa          [PRESENTE]
Docstrings funciones públicas (>=0.50) ratio=0.38 (50 funcs)      [FALTA-RECOMENDADO]

Notas:
 - 'REQUERIDO' = debe estar para cumplir buenas prácticas mínimas de un pipeline reproducible.
 - 'RECOMENDADO' = suma madurez MLOps (mantenibilidad, trazabilidad, gobernanza).
 - Este validador combina preprocess + train + evaluate. No necesitas repetir código en un solo archivo.
 - pipeline=True implica que el modelo final está empacado como Pipeline sklearn, no solo el estimador.
 - column_transformer=True implica que el preprocesamiento declarativo se hace vía ColumnTransformer, aunque viva en otra clase como PreprocessorFactory.

--------------------------------------------------------------
Ejecutando 04_check_tracking_models.py ...
--------------------------------------------------------------

4) Seguimiento de Experimentos, Visualización y Gestión de Modelos — Chequeo estático (módulo german_credit_ml, raíz C:\dev\mna-mlops-team46)
---------------------------------------------------------------------------------------------------------------------------------------------
MLflow en código (tracking básico)                                [PRESENTE]
MLflow: configuración explícita (set_tracking_uri)                [PRESENTE]
MLflow: registro de modelo (log_model/registry)                   [PRESENTE]
MLflow: uso de Model Registry (MlflowClient/transition stage)     [PRESENTE]
mlruns/ presente (tracking local)                                 [PRESENTE]
Experimentos en mlruns/ (>=1)                                     [PRESENTE]
Runs en mlruns/ (>=2 para comparar)                               [PRESENTE]
Runs con parámetros (params/)                                     [PRESENTE]
Runs con métricas (metrics/)                                      [PRESENTE]
Runs con artifacts (artifacts/)                                   [PRESENTE]
Artifacts de modelo MLflow (artifacts/model/MLmodel)              [FALTA-RECOMENDADO]
Artifacts de visualización (png/html/pdf) en mlruns/              [PRESENTE]
Artefactos de modelo versionados (carpeta models/ o MLflow)       [PRESENTE]
DVC: dvc.yaml (pipeline/datos versionados)                        [PRESENTE]
DVC: dvc.lock (congelado de pipeline/datos)                       [PRESENTE]
DVC: .dvc/config (remotos configurados)                           [PRESENTE]
DVC: remoto configurado (alguno)                                  [FALTA-REQUERIDO]
DVC: remoto S3 (recomendado en tu proyecto)                       [PRESENTE]
DVC: archivos .dvc (datos bajo control de DVC)                    [PRESENTE]
params.yaml con claves (hiperparámetros/config)                   [PRESENTE]
README: cómo reproducir/ejecutar (make/pipeline)                  [PRESENTE]
README: sección sobre MLflow/experimentos                         [PRESENTE]
README: sección sobre DVC/datos                                   [PRESENTE]

Leyenda de estados:
  [PRESENTE]           Regla satisfecha
  [FALTA-REQUERIDO]    Debe corregirse para cumplir seguimiento/versionado mínimo
  [FALTA-RECOMENDADO]  Muy aconsejable para comparación/visualización/registro
  [FALTA-OPCIONAL]     Depende del contexto (por ejemplo tracking remoto sin mlruns local)

Sugerencias:
 - Configura un remoto DVC (ej. S3) y empuja datos/modelos con dvc push.

==============================================================
  VALIDACIÓN COMPLETA FINALIZADA CORRECTAMENTE
==============================================================
